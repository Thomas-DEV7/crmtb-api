// prisma/schema.prisma
// CRMTB — Prisma schema completo (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
}

//
// Models
//
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ownership (tudo que o usuário “possui”)
  accounts   Account[]
  contacts   Contact[]
  deals      Deal[]
  activities Activity[]
  pipelines  Pipeline[]

  @@index([email])
}

model Account {
  id        String   @id @default(cuid())
  name      String
  website   String?
  phone     String?
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contacts   Contact[]
  deals      Deal[]
  activities Activity[]

  @@index([ownerId, name])
  @@index([ownerId, website])
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String?
  email     String?  @unique
  phone     String?
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activities Activity[]
  deals      Deal[]     @relation("DealContacts")

  @@index([ownerId, firstName])
  @@index([ownerId, email])
  @@index([accountId])
}

model Pipeline {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stages    Stage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId, name])
}

model Stage {
  id         String   @id @default(cuid())
  name       String
  order      Int
  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  deals Deal[]

  // Garante ordem única por pipeline (1,2,3…)
  @@unique([pipelineId, order])
  @@index([pipelineId, name])
}

model Deal {
  id        String   @id @default(cuid())
  title     String
  amount    Decimal  @db.Decimal(12, 2)
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull)
  stageId   String
  stage     Stage    @relation(fields: [stageId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // M-N com Contact
  contacts Contact[] @relation("DealContacts")

  // 1-N com Activity
  activities Activity[]

  @@index([ownerId, title])
  @@index([stageId])
  @@index([accountId])
}

model Activity {
  id      String       @id @default(cuid())
  type    ActivityType
  subject String
  content String?
  at      DateTime     @default(now())
  ownerId String
  owner   User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  accountId String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull)
  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  dealId    String?
  deal      Deal?    @relation(fields: [dealId], references: [id], onDelete: SetNull)

  @@index([ownerId, at])
  @@index([dealId])
  @@index([contactId])
  @@index([accountId])
}
