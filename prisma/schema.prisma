generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  accounts  Account[]
  contacts  Contact[]
  deals     Deal[]
  activities Activity[]
}

model Account {
  id        String    @id @default(cuid())
  name      String
  website   String?   @db.VarChar(255)
  phone     String?   @db.VarChar(50)
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  contacts  Contact[]
  deals     Deal[]
}

model Contact {
  id         String    @id @default(cuid())
  firstName  String
  lastName   String?
  email      String?   @unique
  phone      String?   @db.VarChar(50)
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id])
  accountId  String?
  account    Account?  @relation(fields: [accountId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  activities Activity[]
  deals      Deal[]    @relation("DealContacts")
}

model Pipeline {
  id        String    @id @default(cuid())
  name      String
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id])
  stages    Stage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Stage {
  id          String   @id @default(cuid())
  name        String
  order       Int
  pipelineId  String
  pipeline    Pipeline @relation(fields: [pipelineId], references: [id])

  deals       Deal[]
}

model Deal {
  id         String    @id @default(cuid())
  title      String
  amount     Decimal   @db.Decimal(12,2)
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id])
  accountId  String?
  account    Account?  @relation(fields: [accountId], references: [id])
  stageId    String
  stage      Stage     @relation(fields: [stageId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  contacts   Contact[] @relation("DealContacts")
  activities Activity[]
}

model Activity {
  id         String        @id @default(cuid())
  type       ActivityType
  subject    String
  content    String?
  at         DateTime      @default(now())
  ownerId    String
  owner      User          @relation(fields: [ownerId], references: [id])

  accountId  String?
  account    Account?      @relation(fields: [accountId], references: [id])
  contactId  String?
  contact    Contact?      @relation(fields: [contactId], references: [id])
  dealId     String?
  deal       Deal?         @relation(fields: [dealId], references: [id])
}
